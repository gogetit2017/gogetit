!function (f, g, j, b) { function h(m) { for (var k = 1; k < arguments.length; k++) { var l = arguments[k]; for (var o in l) { if (m[o] === b) { m[o] = l[o]; } } } return m; } function c(k) { return k.value; } function d(l, k) { return l.className.match(new RegExp("(\\s|^)" + k + "(\\s|$)")); } function e(l, k) { if (!d(l, k)) { l.className += " " + k; } } function i(m, k) { var l = new RegExp("(\\s|^)" + k + "(\\s|$)"); m.className = m.className.replace(l, " "); } var a = function a(k) { if (!this.validate) { return new a(k); } this.opts = h(k || {}, a.defaults); }; a.defaults = { error_class: "validate-error", empty_regex: /^\s*$/, email_regex: /^['a-zA-Z0-9._%+-]+@['a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/, int_regex: /^\s*(\+|-)?\d+\s*$/, decimal_regex: /^\s*(\+|-)?((\d+(\.\d+)?)|(\.\d+))\s*$/, phone_regex: /^[(]{0,1}[0-9]{3}[)]{0,1}[-\s\.]{0,1}[0-9]{3}[-\s\.]{0,1}[0-9]{4}$/, date_regex: /^((0?[1-9]|1[012])[- \/.](0?[1-9]|[12][0-9]|3[01])[- \/.](19|20)?[0-9]{2})*$/, url_regex: /^(http|https|ftp)\:\/\/([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&amp;%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(\/($|[a-zA-Z0-9\.\,\?\'\\\+&amp;%\$#\=~_\-]+))*$/ }; h(a.prototype, { validate: function (q) { var k = this, p = k.opts; if (p.validation_group == b) { return true; } var n = j("." + p.validation_group); var l = ""; for (var m = 0; m < n.length; m++) { if (n[m].className.search("validate-notrequired") > -1) { if (p.empty_regex.test(c(n[m]))) { continue; } } if (n[m].className.search("validate-email") > -1) { if (p.email_regex.test(c(n[m])) == false) { l += "<li>" + q[n[m].id] + "</li>"; j(n[m]).addClass(p.error_class); } else { j(n[m]).removeClass(p.error_class); } } else { if (n[m].className.search("validate-int") > -1) { if (p.int_regex.test(c(n[m])) == false) { l += "<li>" + q[n[m].id] + "</li>"; j(n[m]).addClass(p.error_class); } else { j(n[m]).removeClass(p.error_class); } } else { if (n[m].className.search("validate-decimal") > -1) { if (p.decimal_regex.test(c(n[m])) == false) { l += "<li>" + q[n[m].id] + "</li>"; j(n[m]).addClass(p.error_class); } else { j(n[m]).removeClass(p.error_class); } } else { if (n[m].className.search("validate-phone") > -1) { if (p.phone_regex.test(c(n[m])) == false) { l += "<li>" + q[n[m].id] + "</li>"; j(n[m]).addClass(p.error_class); } else { j(n[m]).removeClass(p.error_class); } } else { if (n[m].className.search("validate-date") > -1) { if (p.empty_regex.test(c(n[m])) || p.date_regex.test(c(n[m])) == false) { l += "<li>" + q[n[m].id] + "</li>"; j(n[m]).addClass(p.error_class); } else { j(n[m]).removeClass(p.error_class); } } else { if (n[m].className.search("validate-url") > -1) { if (p.url_regex.test(c(n[m])) == false) { l += "<li>" + q[n[m].id] + "</li>"; j(n[m]).addClass(p.error_class); } else { j(n[m]).removeClass(p.error_class); } } else { if (p.empty_regex.test(c(n[m]))) { l += "<li>" + q[n[m].id] + "</li>"; j(n[m]).addClass(p.error_class); } else { j(n[m]).removeClass(p.error_class); } } } } } } } } if (l == "") { l = k.error = b; } else { l = k.error = "<ul>" + l + "</ul>"; } }, checkMinLength: function (l, k, n) { var m = g.getElementById(l); if (m) { if (c(m).length >= k) { this.error = b; } else { this.error = "<ul><li>" + n + "</li></ul>"; } } }, checkMaxLength: function (l, k, n) { var m = g.getElementById(l); if (m) { if (c(m).length > k) { this.error = b; } else { this.error = "<ul><li>" + n + "</li></ul>"; } } } }); if (typeof define == "function" && define.amd) { define(function () { return a; }); } else { f.Validator = a; } } (window, document, jQuery);